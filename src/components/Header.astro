<script is:inline>
// Preload posts data for client-side search
const posts = [
  <% posts.forEach(post => { %>
    {
      slug: "<%= post.slug %>",
      title: "<%= post.data.title %>",
      category: "<%= post.data.category || 'Uncategorized' %>",
      tags: <%= JSON.stringify(post.data.tags || []) %>,
      keywords: <%= JSON.stringify(post.data.keywords || []) %>,
      date: "<%= post.data.date %>",
      description: "<%= post.data.description || '' %>",
      content: "<%= post.body.replace(/"/g, '\\"').replace(/\n/g, ' ') %>"
    },
  <% }) %>
];

function initHeader() {
  // DOM elements
  const menuButton = document.getElementById('mobile-menu-toggle');
  const nav = document.getElementById('main-nav');
  const overlay = document.getElementById('overlay');
  const header = document.querySelector('.site-header');
  const categoryToggle = document.querySelector('.category-toggle');
  const categoryMenu = document.getElementById('category-menu');
  const searchButton = document.getElementById('search-toggle');
  const searchOverlay = document.getElementById('search-overlay');
  const searchClose = document.getElementById('search-close');
  const searchForm = document.getElementById('search-form');
  const searchInput = document.getElementById('search-input');
  const searchResults = document.getElementById('search-results');

  // Check if all required elements exist
  if (!menuButton || !nav || !overlay || !header || !searchButton || !searchOverlay || !searchClose || !searchForm || !searchInput || !searchResults) {
    console.error('One or more required DOM elements are missing');
    return;
  }

  let isMenuOpen = false;
  let isCategoryOpen = false;
  let isSearchOpen = false;

  // Menu Toggle
  function toggleMenu() {
    isMenuOpen = !isMenuOpen;
    menuButton.classList.toggle('active', isMenuOpen);
    menuButton.setAttribute('aria-expanded', isMenuOpen);
    nav.classList.toggle('active', isMenuOpen);
    nav.setAttribute('aria-hidden', !isMenuOpen);
    overlay.classList.toggle('active', isMenuOpen);
    document.body.style.overflow = isMenuOpen ? 'hidden' : '';

    if (isMenuOpen) {
      const firstNavLink = nav.querySelector('.nav-link');
      if (firstNavLink) setTimeout(() => firstNavLink.focus(), 100);
      if (isSearchOpen) toggleSearch();
    } else {
      menuButton.focus();
      if (isCategoryOpen) toggleCategoryMenu();
    }
  }

  function closeMenu() {
    if (isMenuOpen) toggleMenu();
  }

  menuButton.addEventListener('click', toggleMenu);
  overlay.addEventListener('click', () => {
    closeMenu();
    closeSearch();
  });

  // Category Menu Toggle
  function toggleCategoryMenu() {
    if (!categoryToggle || !categoryMenu) return;
    isCategoryOpen = !isCategoryOpen;
    categoryToggle.setAttribute('aria-expanded', isCategoryOpen);
    categoryToggle.classList.toggle('active', isCategoryOpen);
    categoryMenu.classList.toggle('active', isCategoryOpen);
  }

  if (categoryToggle && categoryMenu) {
    categoryToggle.addEventListener('click', toggleCategoryMenu);
  }

  // Search Toggle
  function toggleSearch() {
    isSearchOpen = !isSearchOpen;
    searchButton.setAttribute('aria-expanded', isSearchOpen);
    searchOverlay.classList.toggle('active', isSearchOpen);
    searchOverlay.setAttribute('aria-hidden', !isSearchOpen);
    overlay.classList.toggle('active', isSearchOpen);
    document.body.style.overflow = isSearchOpen ? 'hidden' : '';

    if (isSearchOpen) {
      searchInput.focus();
      if (isMenuOpen) closeMenu();
    } else {
      searchButton.focus();
      searchInput.value = '';
      searchResults.innerHTML = '';
    }
  }

  function closeSearch() {
    if (isSearchOpen) toggleSearch();
  }

  searchButton.addEventListener('click', toggleSearch);
  searchClose.addEventListener('click', closeSearch);

  // Search Functionality
  function performSearch(query) {
    searchResults.innerHTML = '';
    if (!query) {
      searchResults.innerHTML = '<p class="no-results">Enter a search term to find articles.</p>';
      return;
    }

    const words = query.toLowerCase().trim().split(' ').filter(Boolean);
    const results = posts
      .filter(post => {
        const titleWords = (post.title || '').toLowerCase().split(' ');
        const categoryWords = (post.category || '').toLowerCase().split(' ');
        const tagWords = (post.tags || []).join(' ').toLowerCase().split(' ');
        const keywordWords = (post.keywords || []).join(' ').toLowerCase().split(' ');
        const contentWords = (post.content || '').toLowerCase().split(' ').filter(word => word.length > 2);
        return words.some(q =>
          titleWords.some(w => w.includes(q)) ||
          categoryWords.some(w => w.includes(q)) ||
          tagWords.some(w => w.includes(q)) ||
          keywordWords.some(w => w.includes(q)) ||
          contentWords.some(w => w.includes(q))
        );
      })
      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
      .slice(0, 3); // Limit to 3 results

    if (results.length === 0) {
      searchResults.innerHTML = `<p class="no-results">No results found for "${query}". Try a different search term.</p>`;
      return;
    }

    const resultsList = document.createElement('ul');
    resultsList.className = 'results-list';
    results.forEach(post => {
      const li = document.createElement('li');
      li.className = 'result-item';
      li.innerHTML = `
        <a href="/posts/${post.slug}" class="result-link">
          <h2 class="result-title">${post.title}</h2>
          <p class="result-meta">${post.category} | ${new Date(post.date).toLocaleDateString()}</p>
          ${post.description ? `<p class="result-description">${post.description}</p>` : ''}
        </a>
      `;
      resultsList.appendChild(li);
    });
    searchResults.appendChild(resultsList);

    const totalResults = posts.filter(post => {
      const titleWords = (post.title || '').toLowerCase().split(' ');
      const categoryWords = (post.category || '').toLowerCase().split(' ');
      const tagWords = (post.tags || []).join(' ').toLowerCase().split(' ');
      const keywordWords = (post.keywords || []).join(' ').toLowerCase().split(' ');
      const contentWords = (post.content || '').toLowerCase().split(' ').filter(word => word.length > 2);
      return words.some(q =>
        titleWords.some(w => w.includes(q)) ||
        categoryWords.some(w => w.includes(q)) ||
        tagWords.some(w => w.includes(q)) ||
        keywordWords.some(w => w.includes(q)) ||
        contentWords.some(w => w.includes(q))
      );
    }).length;

    if (totalResults > 3) {
      const seeMore = document.createElement('a');
      seeMore.className = 'see-more-button';
      seeMore.href = `/search?query=${encodeURIComponent(query)}`;
      seeMore.textContent = 'See More';
      searchResults.appendChild(seeMore);
    }
  }

  searchForm.addEventListener('submit', (e) => {
    e.preventDefault();
    const query = searchInput.value;
    if (query) {
      window.location.href = `/search?query=${encodeURIComponent(query)}`;
    }
  });

  searchInput.addEventListener('input', () => {
    performSearch(searchInput.value);
  });

  // Close menus and search on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (isCategoryOpen) toggleCategoryMenu();
      if (isMenuOpen) closeMenu();
      if (isSearchOpen) closeSearch();
    }
  });

  // Header Scroll Effect
  let lastScrollY = window.scrollY;

  function handleScroll() {
    const currentScrollY = window.scrollY;
    header.classList.toggle('scrolled', currentScrollY > 50);
    lastScrollY = currentScrollY;
  }

  let scrollTimeout;
  window.addEventListener('scroll', () => {
    if (!scrollTimeout) {
      scrollTimeout = setTimeout(() => {
        handleScroll();
        scrollTimeout = null;
      }, 50);
    }
  });

  // Set Active Nav and Category Links
  function setActiveLinks() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');
    const categoryLinks = document.querySelectorAll('.category-link');

    navLinks.forEach(link => {
      link.classList.remove('active');
      const linkPath = link.getAttribute('href');
      if (linkPath === currentPath || (currentPath === '/' && linkPath === '/')) {
        link.classList.add('active');
      }
    });

    categoryLinks.forEach(link => {
      link.classList.remove('active');
      const linkPath = link.getAttribute('href');
      if (currentPath.startsWith(linkPath)) {
        link.classList.add('active');
        if (categoryToggle) categoryToggle.classList.add('active');
      }
    });
  }

  setActiveLinks();
  window.addEventListener('popstate', setActiveLinks);
}

// Initialize the header when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initHeader);
</script>