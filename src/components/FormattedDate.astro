---
import { getFormattedDate } from "@/utils/date";
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"time"> & {
  date: Date;
  dateTimeOptions?: Intl.DateTimeFormatOptions;
  format?: "standard" | "long" | "short" | "relative";
  locale?: string;
};

const { 
  date, 
  dateTimeOptions, 
  format = "standard",
  locale = "en-GB",
  class: className = "",
  ...attrs 
} = Astro.props;

// Default formatting options
const defaultOptions: Record<string, Intl.DateTimeFormatOptions> = {
  standard: { year: "numeric", month: "short", day: "numeric" },
  long: { year: "numeric", month: "long", day: "numeric", weekday: "long" },
  short: { year: "2-digit", month: "short", day: "numeric" }
};

const formatOptions = dateTimeOptions || defaultOptions[format];
const postDate = getFormattedDate(date, formatOptions, locale);
const ISO = date.toISOString();

// Add default styling if no class provided
const timeClass = className || "text-gray-600 dark:text-gray-400 text-sm font-medium";
---

<time 
  datetime={ISO} 
  title={ISO}
  class={timeClass}
  {...attrs}
>
  {format === "relative" ? (
    <script>
      // Client-side relative date calculation
      document.currentScript.parentElement.textContent = new Intl.RelativeTimeFormat(
        '{locale}',
        { numeric: 'auto' }
      ).format(
        Math.floor((new Date('{ISO}') - new Date()) / (1000 * 60 * 60 * 24),
        'day'
      );
    </script>
  ) : (
    postDate
  )}
</time>

<style is:global>
  time {
    font-variant-numeric: tabular-nums;
  }
</style>