---
// src/components/blog/PostPreview.astro
import type { CollectionEntry } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import type { HTMLTag, Polymorphic } from "astro/types";

/**
 * Flexible image extractor that handles:
 * - String paths (local/remote)
 * - Image objects { src, alt }
 * - Fallback to parsing markdown/HTML
 */
const getPostImage = (post: CollectionEntry<"post">): string | null => {
  try {
    // Handle string or object images from frontmatter
    if (typeof post.data.image === 'string') return post.data.image;
    if (post.data.image?.src) return post.data.image.src;
    
    // Fallback: Parse first image from content body
    if (post.body) {
      const markdownMatch = post.body.match(/!\[.*?\]\((.*?)\)/);
      if (markdownMatch?.[1]) return markdownMatch[1];
      
      const htmlMatch = post.body.match(/<img[^>]+src=["']([^"']+)["']/);
      return htmlMatch?.[1] || null;
    }
    
    return null;
  } catch {
    return null;
  }
};

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  post: CollectionEntry<"post">;
  withDesc?: boolean;
  featured?: boolean;
};

const { 
  as: Tag = "article",
  post, 
  withDesc = false, 
  featured = false
} = Astro.props;

const postImage = getPostImage(post);
const placeholderImage = "/Jonathan-Mwaniki-logo.png";
const imageAlt = typeof post.data.image === 'object' 
  ? post.data.image.alt || post.data.title 
  : post.data.title;
// Ensure proper slug handling for URLs
const postUrl = `/posts/${post.slug}/`;
---

<Tag class="group relative overflow-hidden rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-all duration-300 flex flex-col h-full">
  <!-- Image Section -->
  <div class="relative aspect-video overflow-hidden bg-gray-100 dark:bg-gray-800">
    <img
      src={postImage || placeholderImage}
      alt={imageAlt}
      width={800}
      height={450}
      loading="lazy"
      decoding="async"
      class={`w-full h-full transition-transform duration-500 group-hover:scale-105 ${
        postImage ? 'object-cover' : 'object-contain p-6 opacity-80 dark:opacity-60'
      }`}
    />
  </div>

  <!-- Content Section -->
  <div class="p-6 flex-1 flex flex-col">
    <div class="flex items-center gap-3 mb-3">
      <FormattedDate
        class="text-sm font-medium text-gray-500 dark:text-gray-400"
        date={post.data.pubDate}
      />
      {post.data.draft && (
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
          Draft
        </span>
      )}
    </div>

    <h3 class={`${featured ? 'text-2xl' : 'text-xl'} font-bold text-gray-900 dark:text-white mb-3 leading-tight flex-1`}>
      <a 
        class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors after:absolute after:inset-0"
        data-astro-prefetch
        href={postUrl}
      >
        {post.data.title}
      </a>
    </h3>

    {withDesc && post.data.description && (
      <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
        {post.data.description}
      </p>
    )}

    {post.data.tags?.length > 0 && (
      <div class="flex flex-wrap gap-2 mt-auto pt-2">
        {post.data.tags.slice(0, 3).map((tag) => (
          <a
            href={`/tags/${tag}/`}
            class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
            aria-label={`View posts tagged ${tag}`}
          >
            #{tag}
          </a>
        ))}
      </div>
    )}
  </div>
</Tag>

<style>
  /* Preserves clickable card behavior */
  .group h3 a::after {
    content: '';
    position: absolute;
    z-index: 1;
  }
</style>