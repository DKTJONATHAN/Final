---
import { type CollectionEntry, render } from "astro:content";
import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";
import BaseLayout from "./Base.astro";

interface Props {
  post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const { ogImage, title, description, updatedDate, publishDate } = post.data;
const socialImage = ogImage ?? `/og-image/${post.id}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings, remarkPluginFrontmatter } = await render(post);
const readingTime: string = remarkPluginFrontmatter.readingTime;
---

<BaseLayout
  meta={{
    articleDate,
    description,
    ogImage: socialImage,
    title,
  }}
>
  <article class="grow break-words" data-pagefind-body>
    <div id="blog-hero" class="mb-8">
      <Masthead content={post} readingTime={readingTime} />
    </div>

    <div class="flex flex-col gap-8 lg:flex-row lg:items-start">
      {!!headings.length && (
        <div class="lg:sticky lg:top-8 lg:shrink-0 lg:basis-64">
          <TOC headings={headings} />
        </div>
      )}
      
      <div class="prose prose-base w-full max-w-3xl lg:max-w-none">
        <slot />
        <WebMentions class="mt-12" />
      </div>
    </div>
  </article>

  <button
    class="fixed bottom-8 right-4 z-50 flex h-10 w-10 items-center justify-center rounded-full bg-red-600 text-white opacity-0 shadow-md transition-all duration-300 hover:bg-red-700 data-[show=true]:opacity-100 sm:right-8 sm:h-12 sm:w-12"
    data-show="false"
    id="to-top-btn"
    aria-label="Back to top"
  >
    <svg
      aria-hidden="true"
      class="h-6 w-6"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
    >
      <path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round" />
    </svg>
  </button>
</BaseLayout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const scrollBtn = document.getElementById('to-top-btn');
    const targetHeader = document.getElementById('blog-hero');

    const observer = new IntersectionObserver((entries) => {
      scrollBtn.dataset.show = (!entries[0].isIntersecting).toString();
    }, { threshold: 0.1 });

    observer.observe(targetHeader);

    scrollBtn.addEventListener('click', () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  });
</script>