---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Initialize session state (client-side will handle persistence)
const session = Astro.locals.session || {};
const isAuthenticated = session.isAuthenticated === true;

// Fetch posts and categories only if authenticated
let allPosts = [];
let categories = [];
if (isAuthenticated) {
  allPosts = (await getCollection('posts')).sort(
    (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
  );
  categories = [...new Set(allPosts.map(post => post.data.category))].filter(Boolean);
}
---

<Layout
  title="Admin Panel | Jonathan Mwaniki News"
  description="Manage posts and categories for Jonathan Mwaniki News."
>
  <meta name="robots" content="noindex, nofollow" />
  <meta name="author" content="Jonathan Mwaniki" />

  <main class="admin-container">
    <!-- Login View -->
    <div id="login-view" style={isAuthenticated ? 'display: none;' : 'display: block;'}>
      <h1 class="admin-title">Admin Login</h1>
      <form id="login-form">
        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            required
            placeholder="Enter admin password"
          />
        </div>
        <div class="form-actions">
          <button type="submit" class="action-button">Login</button>
        </div>
        <p id="error-message" class="error-message" style="display: none;"></p>
      </form>
    </div>

    <!-- Admin View -->
    <div id="admin-view" style={isAuthenticated ? 'display: block;' : 'display: none;'}>
      <header class="admin-header">
        <h1 class="admin-title">Admin Panel</h1>
        <p class="admin-subtitle">Manage posts and categories for Jonathan Mwaniki News</p>
        <nav class="admin-nav">
          <button id="posts-tab" class="nav-link active">Manage Posts</button>
          <button id="categories-tab" class="nav-link">Manage Categories</button>
          <button id="new-post-tab" class="nav-link">Create Post</button>
          <button id="logout" class="nav-link logout">Logout</button>
        </nav>
      </header>

      <!-- Posts Management Section -->
      <section id="posts-section" class="admin-section" aria-label="Manage Posts">
        <h2 class="section-title">Posts</h2>
        <div class="posts-table">
          <table>
            <thead>
              <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {allPosts.length > 0 ? (
                allPosts.map(post => (
                  <tr>
                    <td>{post.data.title}</td>
                    <td>{post.data.category}</td>
                    <td>
                      {new Date(post.data.date).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                      })}
                    </td>
                    <td>
                      <button
                        data-slug={post.slug}
                        data-title={post.data.title}
                        data-category={post.data.category}
                        data-description={post.data.description || ''}
                        data-content={post.body}
                        data-image={post.data.image || ''}
                        data-image-alt={post.data.imageAlt || ''}
                        data-date={new Date(post.data.date).toISOString().slice(0, 16)}
                        class="action-link edit-post"
                        onclick="openEditPost(this)"
                      >
                        Edit
                      </button>
                      <button
                        data-slug={post.slug}
                        class="action-link delete"
                        onclick="confirmDeletePost(this)"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colspan="4">No posts available.</td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </section>

      <!-- Categories Management Section -->
      <section id="categories-section" class="admin-section" style="display: none;" aria-label="Manage Categories">
        <h2 class="section-title">Categories</h2>
        <div class="action-bar">
          <button id="add-category-btn" class="action-button">Add Category</button>
        </div>
        <div class="categories-list">
          {categories.length > 0 ? (
            categories.map(category => (
              <div class="category-item">
                <span>{category}</span>
                <button
                  data-category={category}
                  class="action-link delete"
                  onclick="confirmDeleteCategory(this)"
                >
                  Delete
                </button>
              </div>
            ))
          ) : (
            <p>No categories available.</p>
          )}
        </div>
      </section>

      <!-- Create/Edit Post Form -->
      <section id="post-form-section" class="admin-section" style="display: none;" aria-label="Create or Edit Post">
        <h2 id="post-form-title" class="section-title">Create New Post</h2>
        <form id="post-form" enctype="multipart/form-data">
          <input type="hidden" id="post-slug" name="slug" />
          <div class="form-group">
            <label for="title">Title</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              placeholder="Enter post title"
            />
          </div>
          <div class="form-group">
            <label for="category">Category</label>
            <select id="category" name="category" required>
              <option value="">Select a category</option>
              {categories.map(category => (
                <option value={category}>{category}</option>
              ))}
              <option value="new">New Category</option>
            </select>
            <input
              type="text"
              id="new-category"
              name="new-category"
              placeholder="Enter new category name"
              style="display: none;"
            />
          </div>
          <div class="form-group">
            <label for="description">Description</label>
            <textarea
              id="description"
              name="description"
              placeholder="Enter post description"
            ></textarea>
          </div>
          <div class="form-group">
            <label for="content">Content</label>
            <textarea
              id="content"
              name="content"
              required
              placeholder="Enter post content (Markdown)"
            ></textarea>
          </div>
          <div class="form-group">
            <label for="image">Feature Image</label>
            <input type="file" id="image" name="image" accept="image/*" />
            <p id="current-image" style="display: none;"></p>
          </div>
          <div class="form-group">
            <label for="imageAlt">Image Alt Text</label>
            <input
              type="text"
              id="imageAlt"
              name="imageAlt"
              placeholder="Enter image alt text"
            />
          </div>
          <div class="form-group">
            <label for="date">Publication Date</label>
            <input
              type="datetime-local"
              id="date"
              name="date"
              required
            />
          </div>
          <div class="form-actions">
            <button type="submit" class="action-button">Save Post</button>
            <button type="button" id="cancel-post" class="action-button cancel">Cancel</button>
          </div>
        </form>
      </section>

      <!-- Category Modal -->
      <div id="category-modal" class="modal" style="display: none;">
        <div class="modal-content">
          <h3>Add New Category</h3>
          <form id="category-form">
            <label for="category-name">Category Name</label>
            <input
              type="text"
              id="category-name"
              name="category-name"
              required
              placeholder="Enter category name"
            />
            <div class="modal-actions">
              <button type="submit" class="action-button">Save</button>
              <button type="button" id="cancel-category" class="action-button cancel">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </main>

  <style>
    :root {
      --bg-color: #ffffff;
      --text-color: #1a1a1a;
      --subtext-color: #4a5568;
      --card-bg: #ffffff;
      --card-border: #e2e8f0;
      --primary-color: #dc2626;
      --primary-hover: #b91c1c;
      --shadow-color: rgba(0, 0, 0, 0.08);
      --focus-outline: #dc2626;
      --modal-bg: #ffffff;
      --modal-shadow: rgba(0, 0, 0, 0.2);
      --error-color: #dc2626;
    }

    @media (prefers-color-scheme: dark) {
      :root {
        --bg-color: #1a1a1a;
        --text-color: #e2e8f0;
        --subtext-color: #9ca3af;
        --card-bg: #2d2d2d;
        --card-border: #4b5563;
        --primary-color: #ef4444;
        --primary-hover: #f87171;
        --shadow-color: rgba(0, 0, 0, 0.3);
        --focus-outline: #f87171;
        --modal-bg: #2d2d2d;
        --modal-shadow: rgba(0, 0, 0, 0.5);
        --error-color: #f87171;
      }
    }

    .admin-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 1rem;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
      background: var(--bg-color);
      color: var(--text-color);
    }

    .admin-title {
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--text-color);
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .admin-subtitle {
      font-size: 1.2rem;
      color: var(--subtext-color);
      margin-bottom: 1.5rem;
      text-align: center;
    }

    .admin-nav {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 2rem;
    }

    .nav-link {
      color: var(--primary-color);
      background: none;
      border: none;
      font-weight: 600;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .nav-link.active,
    .nav-link:hover,
    .nav-link:focus {
      background: var(--primary-color);
      color: #ffffff;
    }

    .logout {
      background: var(--primary-color);
      color: #ffffff;
    }

    .logout:hover,
    .logout:focus {
      background: var(--primary-hover);
    }

    .admin-section {
      margin: 3rem 0;
    }

    .section-title {
      font-size: 2rem;
      font-weight: 700;
      color: var(--text-color);
      margin-bottom: 1.5rem;
      position: relative;
      padding-bottom: 0.5rem;
    }

    .section-title::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 60px;
      height: 3px;
      background: var(--primary-color);
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--text-color);
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--card-border);
      border-radius: 4px;
      font-size: 1rem;
      color: var(--text-color);
      background: var(--card-bg);
    }

    .form-group textarea {
      min-height: 150px;
      resize: vertical;
    }

    .form-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
    }

    .action-button {
      background: var(--primary-color);
      color: #ffffff;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 6px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .action-button:hover,
    .action-button:focus {
      background: var(--primary-hover);
      transform: translateY(-2px);
    }

    .action-button.cancel {
      background: #6b7280;
    }

    .action-button.cancel:hover,
    .action-button.cancel:focus {
      background: #4b5563;
    }

    .posts-table {
      background: var(--card-bg);
      border-radius: 8px;
      box-shadow: 0 4px 15px var(--shadow-color);
      overflow: hidden;
    }

    table {
      width: 100%;
      border-collapse: collapse;
    }

    th,
    td {
      padding: 1rem;
      text-align: left;
      border-bottom: 1px solid var(--card-border);
    }

    th {
      background: var(--primary-color);
      color: #ffffff;
      font-weight: 600;
    }

    td {
      color: var(--text-color);
    }

    .action-link {
      color: var(--primary-color);
      background: none;
      border: none;
      margin-right: 1rem;
      font-weight: 500;
      cursor: pointer;
    }

    .action-link:hover,
    .action-link:focus {
      color: var(--primary-hover);
      text-decoration: underline;
    }

    .action-link.delete {
      color: #dc2626;
    }

    .action-link.delete:hover,
    .action-link.delete:focus {
      color: #b91c1c;
    }

    .categories-list {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .category-item {
      background: var(--card-bg);
      padding: 1rem;
      border-radius: 6px;
      box-shadow: 0 2px 10px var(--shadow-color);
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: calc(50% - 0.5rem);
    }

    .category-item span {
      font-weight: 500;
      color: var(--text-color);
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: var(--modal-bg);
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 20px var(--modal-shadow);
      max-width: 500px;
      width: 90%;
    }

    .modal-content h3 {
      margin-bottom: 1.5rem;
      color: var(--text-color);
    }

    .error-message {
      color: var(--error-color);
      text-align: center;
      margin-top: 1rem;
      font-size: 0.9rem;
    }

    @media (max-width: 768px) {
      .admin-container {
        padding: 1rem 0.75rem;
      }

      .admin-title {
        font-size: 2rem;
      }

      .section-title {
        font-size: 1.75rem;
      }

      .category-item {
        width: 100%;
      }

      th,
      td {
        padding: 0.75rem;
        font-size: 0.9rem;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      * {
        animation: none !important;
        transition: none !important;
      }
    }

    .action-link:focus,
    .action-button:focus,
    .nav-link:focus,
    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
      outline: 2px solid var(--focus-outline);
      outline-offset: 2px;
    }
  </style>

  <script>
    // Initialize session from sessionStorage
    const isAuthenticated = sessionStorage.getItem('isAuthenticated') === 'true';
    if (isAuthenticated) {
      document.getElementById('login-view').style.display = 'none';
      document.getElementById('admin-view').style.display = 'block';
    }

    // Tab navigation
    function showSection(sectionId) {
      document.querySelectorAll('.admin-section').forEach(section => {
        section.style.display = section.id === sectionId ? 'block' : 'none';
      });
      document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.toggle('active', link.id === `${sectionId}-tab`);
      });
      document.getElementById('post-form-title').textContent =
        sectionId === 'post-form-section' && document.getElementById('post-slug').value
          ? 'Edit Post'
          : 'Create New Post';
    }

    document.getElementById('posts-tab').addEventListener('click', () => showSection('posts-section'));
    document.getElementById('categories-tab').addEventListener('click', () => showSection('categories-section'));
    document.getElementById('new-post-tab').addEventListener('click', () => {
      showSection('post-form-section');
      document.getElementById('post-form').reset();
      document.getElementById('post-slug').value = '';
      document.getElementById('current-image').style.display = 'none';
    });

    // Logout
    document.getElementById('logout').addEventListener('click', () => {
      sessionStorage.removeItem('isAuthenticated');
      document.getElementById('login-view').style.display = 'block';
      document.getElementById('admin-view').style.display = 'none';
      document.getElementById('login-form').reset();
      document.getElementById('error-message').style.display = 'none';
    });

    // Login form submission
    document.getElementById('login-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const errorMessage = document.getElementById('error-message');
      const password = document.getElementById('password').value;

      try {
        const response = await fetch('/api/admin/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ password }),
        });

        if (response.ok) {
          sessionStorage.setItem('isAuthenticated', 'true');
          document.getElementById('login-view').style.display = 'none';
          document.getElementById('admin-view').style.display = 'block';
          errorMessage.style.display = 'none';
        } else {
          errorMessage.textContent = 'Invalid password. Please try again.';
          errorMessage.style.display = 'block';
        }
      } catch (error) {
        console.error('Login error:', error);
        errorMessage.textContent = 'An error occurred. Please try again.';
        errorMessage.style.display = 'block';
      }
    });

    // Category modal
    document.getElementById('add-category-btn').addEventListener('click', () => {
      document.getElementById('category-modal').style.display = 'flex';
    });

    document.getElementById('cancel-category').addEventListener('click', () => {
      document.getElementById('category-modal').style.display = 'none';
      document.getElementById('category-form').reset();
    });

    document.getElementById('category-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const categoryName = document.getElementById('category-name').value.trim();
      if (categoryName) {
        try {
          const response = await fetch('/api/categories', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: categoryName }),
          });
          if (response.ok) {
            alert('Category added successfully!');
            window.location.reload();
          } else {
            alert('Failed to add category.');
          }
        } catch (error) {
          console.error('Error adding category:', error);
          alert('An error occurred.');
        }
      }
    });

    // Post form handling
    document.getElementById('category').addEventListener('change', (e) => {
      const newCategoryInput = document.getElementById('new-category');
      newCategoryInput.style.display = e.target.value === 'new' ? 'block' : 'none';
    });

    document.getElementById('cancel-post').addEventListener('click', () => {
      showSection('posts-section');
      document.getElementById('post-form').reset();
      document.getElementById('post-slug').value = '';
      document.getElementById('current-image').style.display = 'none';
    });

    document.getElementById('post-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const slug = formData.get('slug');
      const method = slug ? 'PUT' : 'POST';
      const url = slug ? `/api/posts/${slug}` : '/api/posts';
      const category = formData.get('category') === 'new' ? formData.get('new-category') : formData.get('category');

      try {
        const response = await fetch(url, {
          method,
          body: formData,
        });

        if (response.ok) {
          alert(slug ? 'Post updated successfully!' : 'Post created successfully!');
          window.location.reload();
        } else {
          alert(`Failed to ${slug ? 'update' : 'create'} post.`);
        }
      } catch (error) {
        console.error(`Error ${slug ? 'updating' : 'creating'} post:`, error);
        alert('An error occurred.');
      }
    });

    // Edit post
    window.openEditPost = (button) => {
      showSection('post-form-section');
      document.getElementById('post-slug').value = button.dataset.slug;
      document.getElementById('title').value = button.dataset.title;
      document.getElementById('category').value = button.dataset.category;
      document.getElementById('new-category').style.display = 'none';
      document.getElementById('description').value = button.dataset.description;
      document.getElementById('content').value = button.dataset.content;
      document.getElementById('imageAlt').value = button.dataset.imageAlt;
      document.getElementById('date').value = button.dataset.date;
      const currentImage = document.getElementById('current-image');
      if (button.dataset.image) {
        currentImage.innerHTML = `Current image: <img src="${button.dataset.image}" alt="Current image" width="100" />`;
        currentImage.style.display = 'block';
      } else {
        currentImage.style.display = 'none';
      }
    };

    // Delete post
    window.confirmDeletePost = async (button) => {
      const slug = button.dataset.slug;
      if (confirm('Are you sure you want to delete this post?')) {
        try {
          const response = await fetch(`/api/posts/${slug}`, {
            method: 'DELETE',
          });
          if (response.ok) {
            alert('Post deleted successfully!');
            window.location.reload();
          } else {
            alert('Failed to delete post.');
          }
        } catch (error) {
          console.error('Error deleting post:', error);
          alert('An error occurred.');
        }
      }
    };

    // Delete category
    window.confirmDeleteCategory = async (button) => {
      const category = button.dataset.category;
      if (confirm(`Are you sure you want to delete the "${category}" category?`)) {
        try {
          const response = await fetch(`/api/categories/${category}`, {
            method: 'DELETE',
          });
          if (response.ok) {
            alert('Category deleted successfully!');
            window.location.reload();
          } else {
            alert('Failed to delete category.');
          }
        } catch (error) {
          console.error('Error deleting category:', error);
          alert('An error occurred.');
        }
      }
    };
  </script>
</Layout>