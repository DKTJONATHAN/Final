---
// File: src/pages/admin.astro
import { getCollection } from "astro:content";
const posts = await getCollection("post");

// Auth
const ADMIN_PASSWORD = import.meta.env.ADMIN_PASSWORD;
const inputPass = Astro.url.searchParams.get('password');
const isAuthenticated = inputPass === ADMIN_PASSWORD;

// Handle actions
if (Astro.request.method === "POST" && isAuthenticated) {
  const formData = await Astro.request.formData();
  const action = formData.get("action");
  const slug = formData.get("slug");
  const title = formData.get("title");
  const content = formData.get("content");

  if (action === "delete") {
    await deletePost(slug);
  } else if (action === "create" || action === "update") {
    await savePost({ slug, title, content });
  }
}

async function savePost({ slug, title, content }) {
  const response = await fetch(`https://api.github.com/repos/${import.meta.env.GITHUB_OWNER}/${import.meta.env.GITHUB_REPO}/contents/src/content/post/${slug}.md`, {
    method: "PUT",
    headers: {
      "Authorization": `token ${import.meta.env.GITHUB_TOKEN}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      message: `${title ? "Update" : "Create"} post ${slug}`,
      content: btoa(`---
title: "${title}"
publishDate: "${new Date().toISOString()}"
---\n\n${content}
`)
    })
  });
  return response.json();
}

async function deletePost(slug) {
  const currentFile = await fetch(`https://api.github.com/repos/${import.meta.env.GITHUB_OWNER}/${import.meta.env.GITHUB_REPO}/contents/src/content/post/${slug}.md`, {
    headers: {
      "Authorization": `token ${import.meta.env.GITHUB_TOKEN}`
    }
  }).then(res => res.json());

  await fetch(`https://api.github.com/repos/${import.meta.env.GITHUB_OWNER}/${import.meta.env.GITHUB_REPO}/contents/src/content/post/${slug}.md`, {
    method: "DELETE",
    headers: {
      "Authorization": `token ${import.meta.env.GITHUB_TOKEN}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      message: `Delete post ${slug}`,
      sha: currentFile.sha
    })
  });
}
---
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <style>
    body { font-family: sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
    #editor { height: 300px; border: 1px solid #ddd; margin: 10px 0; }
    .post { padding: 15px; border-bottom: 1px solid #eee; margin-bottom: 10px; }
    button, .btn { background: #4CAF50; color: white; border: none; padding: 8px 12px; margin: 5px; }
    .delete { background: #f44336; }
    input { width: 100%; padding: 8px; margin: 5px 0; }
  </style>
</head>
<body>
  %{!isAuthenticated ? (
    <form action="/admin" method="GET">
      <h2>Admin Login</h2>
      <input type="password" name="password" placeholder="Password" required>
      <button type="submit">Login</button>
    </form>
  ) : (
    <>
      <h1>Admin Panel <small>(<a href="/admin">logout</a>)</small></h1>
      
      <!-- New Post Form -->
      <form id="post-form" method="POST">
        <input type="text" name="title" placeholder="Title" required>
        <div id="editor"></div>
        <input type="hidden" name="content" id="content">
        <button type="submit" name="action" value="create">Create Post</button>
      </form>

      <!-- Posts List -->
      <h2>Existing Posts</h2>
      {posts.map(post => (
        <div class="post">
          <h3>{post.data.title}</h3>
          <form method="POST" style="display:inline">
            <input type="hidden" name="slug" value={post.slug}>
            <button type="submit" name="action" value="delete" class="delete">Delete</button>
          </form>
          <a href={`/admin?password=${inputPass}&edit=${post.slug}`} class="btn">Edit</a>
        </div>
      ))}

      <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
      <script>
        const quill = new Quill('#editor', { theme: 'snow' });
        document.getElementById('post-form').onsubmit = () => {
          document.getElementById('content').value = quill.root.innerHTML;
        };
        // Load content if editing
        %{Astro.url.searchParams.has('edit') && `
          fetch('/posts/${Astro.url.searchParams.get('edit')}/')
            .then(r => r.text())
            .then(html => {
              quill.clipboard.dangerouslyPasteHTML(html);
            });
        `}
      </script>
    </>
  )}
</body>
</html>