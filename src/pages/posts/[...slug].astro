---
// /src/pages/posts/[...slug].astro - Tailwind v4 Compatible
import { type CollectionEntry, getCollection } from "astro:content";
import { getAllPosts, getRelatedPosts } from "@/data/post";
import PostPreview from "@/components/blog/PostPreview.astro";
import PageLayout from "@/layouts/Base.astro";
import { formatDate } from "@/utils/date";

export async function getStaticPaths() {
  const posts = await getAllPosts();
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<"posts">;
}

const { post } = Astro.props;
const { Content } = await post.render();
const relatedPosts = await getRelatedPosts(post, 3);

const { title, description, publishDate, updatedDate, author, category, image, tags } = post.data;

// SEO meta
const meta = {
  title,
  description: description || `Read ${title} by ${author}`,
  canonical: `${Astro.site}posts/${post.slug}/`,
  image: image?.src,
};
---

<PageLayout {meta}>
  <article class="article-container">
    <!-- Article Header -->
    <header class="article-header">
      {category && (
        <div class="category-container">
          <span class="category-badge">
            {category}
          </span>
        </div>
      )}
      
      <h1 class="article-title">
        {title}
      </h1>
      
      {description && (
        <p class="article-description">
          {description}
        </p>
      )}
      
      <!-- Article Meta -->
      <div class="article-meta">
        <div class="meta-primary">
          <span>By <strong>{author}</strong></span>
          <time datetime={publishDate.toISOString()}>
            {formatDate(publishDate)}
          </time>
          {updatedDate && (
            <span class="updated-date">
              Updated: <time datetime={updatedDate.toISOString()}>{formatDate(updatedDate)}</time>
            </span>
          )}
        </div>
        
        {tags && tags.length > 0 && (
          <div class="tags-container">
            {tags.map((tag) => (
              <span class="tag">
                #{tag}
              </span>
            ))}
          </div>
        )}
      </div>
    </header>

    <!-- Featured Image -->
    {image && (
      <div class="featured-image">
        <img
          src={image.src}
          alt={image.alt}
          width="1200"
          height="630"
        />
      </div>
    )}

    <!-- Article Content -->
    <div class="article-content">
      <Content />
    </div>
  </article>

  <!-- Related Posts -->
  {relatedPosts.length > 0 && (
    <section class="related-posts">
      <h2 class="related-title">Related Stories</h2>
      <div class="related-grid">
        {relatedPosts.map((relatedPost) => (
          <PostPreview post={relatedPost} />
        ))}
      </div>
    </section>
  )}
</PageLayout>

<style>
  .article-container {
    max-width: 64rem;
    margin: 0 auto;
  }

  .article-header {
    margin-bottom: 2rem;
  }

  .category-container {
    margin-bottom: 1rem;
  }

  .category-badge {
    display: inline-block;
    background-color: #fee2e2;
    color: #991b1b;
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .article-title {
    margin-bottom: 1rem;
    font-size: 2.5rem;
    font-weight: bold;
    line-height: 1.2;
  }

  .article-description {
    margin-bottom: 1.5rem;
    font-size: 1.25rem;
    color: #6b7280;
  }

  .article-meta {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid #e5e7eb;
    font-size: 0.875rem;
    color: #6b7280;
  }

  .meta-primary {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .updated-date {
    font-size: 0.75rem;
  }

  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background-color: #f3f4f6;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
  }

  .featured-image {
    margin-bottom: 2rem;
    overflow: hidden;
    border-radius: 0.5rem;
  }

  .featured-image img {
    width: 100%;
    height: auto;
  }

  .article-content {
    max-width: 65ch;
    margin: 0 auto;
    font-size: 1.125rem;
    line-height: 1.7;
    color: #374151;
  }

  .related-posts {
    margin-top: 4rem;
  }

  .related-title {
    margin-bottom: 2rem;
    font-size: 1.5rem;
    font-weight: bold;
  }

  .related-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: 1fr;
  }

  /* Dark mode styles */
  @media (prefers-color-scheme: dark) {
    .category-badge {
      background-color: rgba(153, 27, 27, 0.3);
      color: #fca5a5;
    }

    .article-description {
      color: #d1d5db;
    }

    .article-meta {
      border-bottom-color: #374151;
      color: #9ca3af;
    }

    .tag {
      background-color: #1f2937;
    }

    .article-content {
      color: #d1d5db;
    }
  }

  /* Responsive design */
  @media (min-width: 768px) {
    .article-title {
      font-size: 3rem;
    }

    .article-meta {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }

    .related-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 1024px) {
    .related-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  /* Content styling */
  .article-content :global(h2) {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: bold;
    border-bottom: 1px solid #e5e7eb;
    padding-bottom: 0.5rem;
  }

  .article-content :global(h3) {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    font-size: 1.25rem;
    font-weight: bold;
  }

  .article-content :global(p) {
    margin-bottom: 1rem;
  }

  .article-content :global(ul, ol) {
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }

  .article-content :global(blockquote) {
    margin: 1.5rem 0;
    padding: 1rem;
    border-left: 4px solid #ef4444;
    background-color: #f9fafb;
    font-style: italic;
  }

  @media (prefers-color-scheme: dark) {
    .article-content :global(h2) {
      border-bottom-color: #374151;
    }

    .article-content :global(blockquote) {
      background-color: rgba(31, 41, 55, 0.5);
    }
  }
</style>