---
import { render } from "astro:content";
import Pagination from "@/components/Paginator.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import { getAllPosts, getTagMeta, getUniqueTags } from "@/data/post";
import PageLayout from "@/layouts/Base.astro";
import { collectionDateSort } from "@/utils/date";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async ({ paginate }) => {
  try {
    const allPosts = await getAllPosts();
    const sortedPosts = allPosts.sort(collectionDateSort);
    let uniqueTags = await getUniqueTags(sortedPosts); // Ensure Promise is resolved

    // Debug logging (remove in production)
    console.log('[DEBUG] Total posts:', sortedPosts.length);
    console.log('[DEBUG] Unique tags:', uniqueTags);

    // Ensure uniqueTags is an array; fallback to empty array if not
    if (!Array.isArray(uniqueTags)) {
      console.warn(`[WARNING] getUniqueTags returned non-array: ${JSON.stringify(uniqueTags)}. Falling back to empty array.`);
      uniqueTags = [];
    }

    return uniqueTags.flatMap((tag) => {
      const postsWithTag = sortedPosts.filter((post) => 
        Array.isArray(post.data.tags) && post.data.tags.includes(tag)
      );
      
      if (postsWithTag.length === 0) {
        console.warn(`[WARNING] No posts found for tag: ${tag}`);
        return [];
      }

      return paginate(postsWithTag, {
        pageSize: 10,
        params: { tag },
      });
    });
  } catch (error) {
    console.error('[ERROR] in getStaticPaths:', error);
    return [];
  }
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { page } = Astro.props as Props;
const { tag } = Astro.params;
const tagMeta = await getTagMeta(tag);

const TagContent = tagMeta ? (await render(tagMeta)).Content : null;

const meta = {
  description: tagMeta?.data.description ?? `View all posts with the tag - ${tag}`,
  title: tagMeta?.data.title ?? `Posts about ${tag}`,
};

const paginationProps = {
  ...(page.url.prev && {
    prevUrl: {
      text: "← Previous Tags",
      url: page.url.prev,
    },
  }),
  ...(page.url.next && {
    nextUrl: {
      text: "Next Tags →",
      url: page.url.next,
    },
  }),
};
---

<PageLayout meta={meta}>
  <nav class="mb-8" aria-label="Breadcrumbs">
    <ul class="flex items-center">
      <li class="flex items-center">
        <a class="text-accent" href="/tags/">Tags</a>
        <Icon aria-hidden="true" name="mdi:chevron-right" class="mx-1.5" />
      </li>
      <li aria-current="page" class=""><span aria-hidden="true">#</span>{tag}</li>
    </ul>
  </nav>

  <h1 class="title capitalize">{tagMeta?.data.title ?? `Posts about ${tag}`}</h1>
  
  <div class="prose prose-sm prose-cactus mb-16 max-w-none">
    {tagMeta?.data.description && <p>{tagMeta.data.description}</p>}
    {TagContent && <TagContent />}
  </div>

  <ul class="space-y-6">
    {
      page.data.map((p) => (
        <li class="grid gap-2 sm:grid-cols-[auto_1fr]">
          <PostPreview as="h2" post={p} />
        </li>
      ))
    }
  </ul>

  <Pagination {...paginationProps} />
</PageLayout>

<style>
  .prose-cactus a {
    text-decoration: none;
    font-weight: 500;
    color: var(--theme-accent);
  }
  
  .prose-cactus a:hover {
    text-decoration: underline;
  }
</style>